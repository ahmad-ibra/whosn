// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	testing "testing"

	models "github.com/Ahmad-Ibra/whosn-core/internal/data/models"
	mock "github.com/stretchr/testify/mock"
)

// Storer is an autogenerated mock type for the Storer type
type Storer struct {
	mock.Mock
}

// DeleteEventByID provides a mock function with given fields: eventID
func (_m *Storer) DeleteEventByID(eventID string) error {
	ret := _m.Called(eventID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(eventID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEventUserByEventIDUserID provides a mock function with given fields: eventID, userID
func (_m *Storer) DeleteEventUserByEventIDUserID(eventID string, userID string) error {
	ret := _m.Called(eventID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(eventID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserByID provides a mock function with given fields: userID
func (_m *Storer) DeleteUserByID(userID string) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEventByID provides a mock function with given fields: eventID
func (_m *Storer) GetEventByID(eventID string) (*models.Event, error) {
	ret := _m.Called(eventID)

	var r0 *models.Event
	if rf, ok := ret.Get(0).(func(string) *models.Event); ok {
		r0 = rf(eventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventUserByEventIDUserID provides a mock function with given fields: eventID, userID
func (_m *Storer) GetEventUserByEventIDUserID(eventID string, userID string) (*models.EventUser, error) {
	ret := _m.Called(eventID, userID)

	var r0 *models.EventUser
	if rf, ok := ret.Get(0).(func(string, string) *models.EventUser); ok {
		r0 = rf(eventID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EventUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(eventID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: userID
func (_m *Storer) GetUserByID(userID string) (*models.User, error) {
	ret := _m.Called(userID)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUserName provides a mock function with given fields: userName
func (_m *Storer) GetUserByUserName(userName string) (*models.User, error) {
	ret := _m.Called(userName)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertEvent provides a mock function with given fields: event
func (_m *Storer) InsertEvent(event *models.Event) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Event) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertEventUser provides a mock function with given fields: eventUser
func (_m *Storer) InsertEventUser(eventUser *models.EventUser) error {
	ret := _m.Called(eventUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.EventUser) error); ok {
		r0 = rf(eventUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertUser provides a mock function with given fields: user
func (_m *Storer) InsertUser(user *models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListJoinedEvents provides a mock function with given fields: userID
func (_m *Storer) ListJoinedEvents(userID string) (*[]models.Event, error) {
	ret := _m.Called(userID)

	var r0 *[]models.Event
	if rf, ok := ret.Get(0).(func(string) *[]models.Event); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOwnedEvents provides a mock function with given fields: userID
func (_m *Storer) ListOwnedEvents(userID string) (*[]models.Event, error) {
	ret := _m.Called(userID)

	var r0 *[]models.Event
	if rf, ok := ret.Get(0).(func(string) *[]models.Event); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEventByID provides a mock function with given fields: event, eventID
func (_m *Storer) UpdateEventByID(event *models.Event, eventID string) error {
	ret := _m.Called(event, eventID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Event, string) error); ok {
		r0 = rf(event, eventID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserByID provides a mock function with given fields: user, userID
func (_m *Storer) UpdateUserByID(user *models.User, userID string) error {
	ret := _m.Called(user, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User, string) error); ok {
		r0 = rf(user, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorer creates a new instance of Storer. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorer(t testing.TB) *Storer {
	mock := &Storer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
